# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.19.1"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Register new device"
  lane :register_new_device do  |options|
      device_name = prompt(text: "Enter the device name: ")
      device_udid = prompt(text: "Enter the device UDID: ")
      device_hash = {}
      device_hash[device_name] = device_udid
      register_devices(devices: device_hash)

      match(type: "development", force_for_new_devices: true)
  end

  desc "Get provisionings to development schema"
  lane :match_dev do
    match(
      type: "development",
      app_identifier: "io.swift-evolution.app.development",
      force_for_new_devices: true
    )
  end

  private_lane :increment do |option|
    if !option.empty? && !option[:increment].nil?
      puts option
      if option[:increment] == 'minor'
        increment_version_number(
          bump_type: 'minor'
        )

      elsif option[:increment] == 'patch'
        # the default value for 'bump_type' is 'patch',
        # this is the main reason to not inform here
        increment_version_number

      elsif option[:increment] == 'build'
        increment_build_number
      end
    end
  end

  private_lane :commit_changes do
    get_build_number
    get_version_number

    version = Actions.lane_context[Actions::SharedValues::VERSION_NUMBER]
    build = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]

    # Ensure that all files will be add and commited
    git_commit(
      path: ".",
      message: "release #{version} build #{build}"
    )

    add_git_tag(
      tag: "release/#{version}/#{build}"
    )
    
    push_to_git_remote(
      tags: true,
      local_branch: git_branch,
      remote_branch: git_branch
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # Download certificates and provisionings
    match(type: "appstore") # more information: https://codesigning.guide
    
    # check if project is okay to AppStore
    precheck
    
     # will increment the build version
    increment(increment: 'build')

    # Build your app - more options available
    gym(scheme: "swift-evolution",
        include_bitcode: false,
        include_symbols: false)

    # Commit all changes and push it to remote repo
    commit_changes

    # Send release to TestFlight
    pilot
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "swift-evolution") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
