# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.19.1"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Register new device"
  lane :register_new_device do  |options|
      device_name = prompt(text: "Enter the device name: ")
      device_udid = prompt(text: "Enter the device UDID: ")
      device_hash = {}
      device_hash[device_name] = device_udid
      register_devices(devices: device_hash)

      match(type: "development", force_for_new_devices: true)
  end

  desc "Get provisionings to development schema"
  lane :match_dev do
    match(
      type: "development",
      app_identifier: "io.swift-evolution.app.development",
      force_for_new_devices: true
    )
  end

  desc 'Generate Push Notification certificates for EVO'
  desc 'Available parameters:'
  desc '- force [boolean]'
  desc '     description: create a new push certificate'
  desc '     - values: true | false'
  desc ''
  desc '- development [boolean]'
  desc '     description: generate the development certificate for the environment selected'
  desc '     - values: true | false'
  desc ''
  desc 'Example: '
  desc '$ bundle exec fastlane generate_pem environment:internal force:true development:true'
  lane :generate_pem do |option|

    bundle_id = 'io.swift-evolution.app'
    development = false
    force = false

    if !option[:force].nil? && option[:force] == true
      force = true
    end

    if !option[:development].nil? && option[:development] == true
      ENV['PEM_DEVELOPMENT'] = 'true'
      development = true
    end


    # Select environment
    environment = UI.select("Select the environment: ", ['development', 'production', 'internal'])
    if environment == 'development'
      development = true
    elsif environment == 'internal'
      bundle_id = "#{bundle_id}.development"
    end

    # Password
    p12_password = UI.password("Enter P12 password: ")
    if !p12_password.empty?
      ENV['PEM_P12_PASSWORD'] = p12_password
    end

    # PEM name
    development_env = ''
    if development
      development_env = '-development'
    end

    pem_name_suggestion = "#{bundle_id}#{development_env}.pem"
    ENV['PEM_FILE_NAME'] = pem_name_suggestion

    pem_name = UI.input "Enter PEM name [#{pem_name_suggestion}?]: "
    if !pem_name.empty?
      ENV['PEM_FILE_NAME'] = pem_name  
    end

    # Output Path
    output_path_suggestion = '~/.'
    pem_output_path = UI.input "Enter PEM output path [#{output_path_suggestion}]: "
    if !pem_output_path.empty?
      ENV['PEM_OUTPUT_PATH'] = pem_output_path
    end

    # Generate PEM
    get_push_certificate(
      force: force,
      app_identifier: bundle_id,
      save_private_key: true,
      generate_p12: true
    )
    puts 'It\'s the end of the world as we know it :D'
  end

  lane :increment do |option|
    if !option.empty? && !option[:in].nil?
      puts option
      if option[:in] == 'minor'
        increment_version_number(
          bump_type: 'minor'
        )

      elsif option[:in] == 'patch'
        # the default value for 'bump_type' is 'patch',
        # this is the main reason to not inform here
        increment_version_number

      elsif option[:in] == 'build'
        increment_build_number
      end
    end
  end

  private_lane :commit_changes do
    get_build_number
    get_version_number

    version = Actions.lane_context[Actions::SharedValues::VERSION_NUMBER]
    build = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]

    # Ensure that all files will be add and commited
    git_commit(
      path: ".",
      message: "release #{version} build #{build}"
    )

    add_git_tag(
      tag: "release/#{version}/#{build}"
    )
    
    push_to_git_remote(
      tags: true,
      local_branch: git_branch,
      remote_branch: git_branch
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # Download certificates and provisionings
    match(type: "appstore") # more information: https://codesigning.guide
    
    # check if project is okay to AppStore
    precheck
    
     # will increment the build version
    increment(in: 'build')

    # Build your app - more options available
    gym(scheme: "swift-evolution",
        include_bitcode: true,
        include_symbols: true)

    # Commit all changes and push it to remote repo
    commit_changes

    # Send release to TestFlight
    pilot
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "swift-evolution") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
